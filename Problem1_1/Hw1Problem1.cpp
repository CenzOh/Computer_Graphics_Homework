///////////////////////////////////
// First OpenGL I made borrowing code from square
//  F7 to "build solution" and F5 to "debug". F5 draws the graphics in a new window
// CSC 470 Hw1
// Vincenzo Mezzio Joseph DeMario Vincent Loretta 
//Self note: Ctrl + k + c to comment. Ctrl + k + u to uncomment
///////////////////////////////////

#include <GL/glew.h>
#include <GL/freeglut.h> 

// Drawing routine.
void drawScene(void)
{	//Problem 1, Basic Drawing 
	//It seems we should make basic drawings, do not turn them into a house!
	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(5.0); //sets point size experiment 2.11

	glColor3f(0.0, 0.0, 1.0); //blue; color interpolation. R, G, B
	glBegin(GL_POLYGON); //pentagon
		glVertex3f(20.0, 10.0, 0.0); // x, y, z
		glVertex3f(15.0, 15.0, 0.0);
		glVertex3f(25.0, 20.0, 0.0);
		glColor3f(0.0, 1.0, 0.0); //green
		glVertex3f(30.0, 15.0, 0.0);
		glVertex3f(25.0, 10.0, 0.0);
	glEnd();

	glColor3f(1.0, 0.0, 1.0); //purple; color interpolation
	glBegin(GL_POLYGON); //hexagon
		glVertex3f(50.0, 5.0, 0.0);
		glVertex3f(45.0, 10.0, 0.0);
		glVertex3f(47.0, 15.0, 0.0);
		glColor3f(0.39, 0.26, 0.12); //brown
		glVertex3f(55.0, 20.0, 0.0);
		glVertex3f(60.0, 15.0, 0.0);
		glVertex3f(56.0, 5.0, 0.0);
	glEnd();
	
	glColor3f(1.0, 0.0, 0.0); //2.21 red
	// Draw a polygon with specified vertices.
	glBegin(GL_POLYGON); //Diamond, mono color. 2.5 and 2.6
		glVertex3f(30.0, 30.0, 0.0); //Up to experiment 2.14 and figure 2.21 CONTINUE
		glVertex3f(24.0, 36.0, 0.0);
		glVertex3f(30.0, 44.0, 0.0);
		glVertex3f(38.0, 36.0, 0.0);
	glEnd();

	glColor3f(1.0, 0.5, 0.0); //Orange
	glBegin(GL_TRIANGLES); //Triangle, mono color. 3 vertex for a triangle. 
		glVertex3f(35.0, 60.0, 0.0);
		glVertex3f(35.0, 80.0, 0.0);
		glVertex3f(62.0, 60.0, 0.0);
	glEnd();

	glViewport(0, 0, 480, 480); //TESTING??

	glEnable(GL_POLYGON_STIPPLE); //enable the stipple for the mask

	GLubyte brick[] = { //brick mask
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC
	};
	glColor3f(1.0, 0.0, 0.0); //red color for brick
	glPolygonStipple(brick); //we want this array (brick) to be the polygon stipple (texture)

	glBegin(GL_POLYGON);
		glVertex3f(70.0, 10.0, 0.0);
		glVertex3f(80.0, 40.0, 0.0);
		glVertex3f(60.0, 30.0, 0.0);
		glVertex3f(90.0, 10.0, 0.0);
	glEnd();
	glDisable(GL_POLYGON_STIPPLE); //make sure to end the stipple 
							//camp fire
	glEnable(GL_POLYGON_STIPPLE); //start a new stipple
	GLubyte fire[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x01, 0xf0,
						0x00, 0x00, 0x07, 0xf0, 0x0f, 0x00, 0x1f, 0xe0,
						0x1f, 0x80, 0x1f, 0xc0, 0x0f, 0xc0, 0x3f, 0x80,
						0x07, 0xe0, 0x7e, 0x00, 0x03, 0xf0, 0xff, 0x80,
						0x03, 0xf5, 0xff, 0xe0, 0x07, 0xfd, 0xff, 0xf8,
						0x1f, 0xfc, 0xff, 0xe8, 0xff, 0xe3, 0xbf, 0x70,
						0xde, 0x80, 0xb7, 0x00, 0x71, 0x10, 0x4a, 0x80,
						0x03, 0x10, 0x4e, 0x40, 0x02, 0x88, 0x8c, 0x20,
						0x05, 0x05, 0x04, 0x40, 0x02, 0x82, 0x14, 0x40,
						0x02, 0x40, 0x10, 0x80, 0x02, 0x64, 0x1a, 0x80,
						0x00, 0x92, 0x29, 0x00, 0x00, 0xb0, 0x48, 0x00,
						0x00, 0xc8, 0x90, 0x00, 0x00, 0x85, 0x10, 0x00,
						0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, };


	glColor3f(0.5, 0.0, 1.0); //Purple campfire
	glPolygonStipple(fire); //assign the fire mask to the polygon stipple
	glRecti(80, 100, 95, 75); //L T R B			Rectangle
	glDisable(GL_POLYGON_STIPPLE); //end the second stipple

	glEnable(GL_POLYGON_STIPPLE); //start the third stipple
	//fly 
	GLubyte fly[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
  0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
  0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
  0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
  0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
  0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
  0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
  0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
  0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
  0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
  0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
  0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
  0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
  0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
  0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 };



	glPolygonStipple(fly); //set the stipple to the fly mask
	glBegin(GL_TRIANGLES); //start the drawing
		glColor3f(0.3, 0.6, 0.8); //set color to blue fly
		glVertex3f(10.0, 80.0, 0.0);
		glVertex3f(30.0, 90.0, 0.0);
		glVertex3f(10.0, 60.0, 0.0);
		//glRecti(60, 80, 65, 65);
	glEnd(); //end the drawing



	glFlush(); //end of drawing
	glDisable(GL_POLYGON_STIPPLE); //followed the slides
}

// Initialization routine.
void setup(void)
{
	glClearColor(0.9, 0.9, 0.9, 0.0); //background color, will make faint gray
}

// OpenGL window reshape routine.
void resize(int w, int h)
{
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(0.0, 100.0, 0.0, 100.0, -1.0, 1.0); //2.3, viewing box

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

// Keyboard input processing routine.
void keyInput(unsigned char key, int x, int y)
{
	switch (key)
	{
	case 27:
		exit(0);
		break;
	default:
		break;
	}
}

// Main routine.
int main(int argc, char **argv)
{
	glutInit(&argc, argv);

	glutInitContextVersion(4, 3);
	glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA);

	glutInitWindowSize(600, 600); //2.2 square and window shape change size
	glutInitWindowPosition(0, 0); //2.4 where the window will be placed onscreen

	glutCreateWindow("Hw1Problem1.cpp"); //top left of window displays this name

	glutDisplayFunc(drawScene);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyInput);

	glewExperimental = GL_TRUE;
	glewInit();

	setup();

	glutMainLoop();
}